---
title: Almacenamiento y Redes en Docker
subtitle: Almacenamiento persistente y comunicaci√≥n entre contenedores
date: last-modified
author:
  - name: Francisco Palm
    orcid: 0000-0002-1293-0868
    email: fpalm@qu4nt.com
    affiliations: qu4nt, activistasxsl
format:
  clean-revealjs
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
lang: es
logo: images/qu4nt-logo.png
---

# Almacenamiento y Redes en Docker
## Almacenamiento persistente y comunicaci√≥n entre contenedores

---

## ¬øPor qu√© nos importa el almacenamiento?

::: {.columns}
::: {.column width="50%"}
**Problema:** Los contenedores son ef√≠meros
- Por dise√±o, los contenedores son temporales
- Cuando un contenedor se elimina, TODO su contenido desaparece
- ¬°Incluyendo bases de datos, archivos de configuraci√≥n, logs!
:::

::: {.column width="50%"}
```mermaid
graph TD
    A[Contenedor MySQL] --> B[Datos en capa escribible]
    B --> C[¬°Contenedor eliminado!]
    C --> D[üí• Datos perdidos]
```
:::
:::

**Soluci√≥n:** Necesitamos almacenamiento PERSISTENTE

---

## El sistema de archivos de Docker

::: {.columns}
::: {.column width="60%"}
```mermaid
graph TB
    A[Imagen Base] --> B[Capa 1: SO]
    A --> C[Capa 2: Aplicaci√≥n]
    A --> D[Capa 3: Configuraci√≥n]
    
    B --> E[Contenedor]
    C --> E
    D --> E
    
    E --> F[Capa escribible<br/>Union File System]
    
    style F fill:#e1f5fe
```
:::

::: {.column width="40%"}
**Concepto clave:** Capas superpuestas
- **Capas de solo lectura:** Provenientes de la imagen
- **Capa escribible:** √önica por contenedor
- **Union File System:** Combina todas las capas
:::
:::

---

## Tipos de almacenamiento en Docker

```mermaid
graph LR
    A[Almacenamiento Docker] --> B[Bind Mounts]
    A --> C[Volumes]
    A --> D[tmpfs mounts]
    
    B --> E[Host directamente]
    C --> F[Gestionado por Docker]
    D --> G[Memoria RAM]
    
    style C fill:#c8e6c9
```

---

## Volumes: La opci√≥n recomendada

::: {.columns}
::: {.column width="50%"}
**¬øQu√© son?**
- Directorios gestionados por Docker
- Independientes del ciclo de vida del contenedor
- Ubicaci√≥n gestionada por Docker (/var/lib/docker/volumes)

**Ventajas:**
- Backup y migraci√≥n f√°ciles
- Gestionados mediante CLI de Docker
- Mejor rendimiento en algunos sistemas
:::

::: {.column width="50%"}
```mermaid
graph TB
    A[Contenedor A] --> C[Volume MySQL]
    B[Contenedor B] --> C
    D[Contenedor C] --> C
    
    C --> E[Persiste entre contenedores]
    E --> F[Sobrevive a reinicios]
```
:::
:::

---

## Bind Mounts: Conexi√≥n directa

::: {.columns}
::: {.column width="50%"}
**¬øQu√© son?**
- Montaje de un directorio espec√≠fico del host
- El contenedor accede directamente al filesystem del host

**Casos de uso:**
- Desarrollo (c√≥digo fuente)
- Configuraciones espec√≠ficas del host
- Cuando necesitas control total
:::

::: {.column width="50%"}
```mermaid
graph LR
    A[/home/usuario/proyecto] --> B[Contenedor App]
    C[/etc/config] --> B
    
    style A fill:#fff3e0
    style C fill:#fff3e0
```
:::
:::

**‚ö†Ô∏è Precauci√≥n:** Puede causar conflictos de permisos

---

## tmpfs: Almacenamiento en memoria

::: {.columns}
::: {.column width="60%"}
**¬øQu√© son?**
- Sistema de archivos temporal en memoria RAM
- Extremadamente r√°pido
- Se pierde al reiniciar el contenedor

**Casos de uso:**
- Archivos temporales sensibles
- Cach√©s que no necesitan persistir
- Informaci√≥n sensible que no debe escribirse en disco
:::

::: {.column width="40%"}
```mermaid
graph TB
    A[Memoria RAM] --> B[tmpfs mount]
    B --> C[Contenedor]
    
    style A fill:#fce4ec
```
:::
:::

---

## Comparaci√≥n: ¬øCu√°ndo usar cada uno?

| Tipo | Persistencia | Rendimiento | Caso principal |
|------|--------------|-------------|----------------|
| **Volumes** | ‚úÖ S√≠ | Alto | Producci√≥n, bases de datos |
| **Bind Mounts** | ‚úÖ S√≠ | Medio | Desarrollo, configuraciones |
| **tmpfs** | ‚ùå No | Muy alto | Datos temporales sensibles |

---

## ¬øPor qu√© necesitamos redes en Docker?

::: {.columns}
::: {.column width="50%"}
**Problema inicial:**
- Los contenedores est√°n aislados
- No pueden comunicarse entre s√≠ por defecto
- No son accesibles desde el exterior

**Necesitamos:**
- Comunicaci√≥n entre contenedores
- Exponer servicios al mundo exterior
- Aislamiento de redes diferentes
:::

::: {.column width="50%"}
```mermaid
graph LR
    A[üåê Internet] --> B[¬øC√≥mo llego?]
    C[Contenedor Web] --> D[Contenedor DB]
    D --> C
    
    style B fill:#ffcdd2
```
:::
:::

---

## Arquitectura de red por defecto

```mermaid
graph TB
    A[Host Machine] --> B[Docker Engine]
    B --> C[Docker Daemon]
    
    C --> D[docker0 Bridge]
    D --> E[Contenedor A<br/>172.17.0.2]
    D --> F[Contenedor B<br/>172.17.0.3]
    D --> G[Contenedor C<br/>172.17.0.4]
    
    A --> H[eth0: 192.168.1.100]
    
    style D fill:#e8f5e8
```

**Bridge por defecto:** Todos los contenedores conectados autom√°ticamente

---

## Tipos de redes en Docker

```mermaid
graph TB
    A[Tipos de Red] --> B[Bridge]
    A --> C[Host]
    A --> D[None]
    A --> E[Overlay]
    
    B --> F[Aislamiento por defecto]
    C --> G[Comparte red del host]
    D --> H[Sin red]
    E --> I[Multi-host]
    
    style B fill:#bbdefb
```

---

## Bridge Network: El m√°s com√∫n

::: {.columns}
::: {.column width="50%"}
**Caracter√≠sticas:**
- Red privada interna a Docker
- NAT para comunicaci√≥n externa
- DNS autom√°tico entre contenedores
- Aislamiento por defecto

**Como un router virtual:**
- Cada contenedor tiene IP √∫nica
- Pueden comunicarse entre s√≠
- Salida al exterior mediante NAT
:::

::: {.column width="50%"}
```mermaid
graph TB
    A[Bridge Network] --> B[Contenedor Web:80]
    A --> C[Contenedor DB:3306]
    A --> D[Contenedor Cache:6379]
    
    B --> E[üì° Puerto 8080 expuesto]
    E --> F[üåê Internet]
    
    style A fill:#e3f2fd
```
:::
:::

---

## Host Network: M√°ximo rendimiento

::: {.columns}
::: {.column width="50%"}
**Caracter√≠sticas:**
- El contenedor usa la red del host directamente
- Sin aislamiento de red
- M√°ximo rendimiento (sin NAT)

**Casos de uso:**
- Alto rendimiento necesario
- Cuando necesitas usar puertos del host directamente
- Aplicaciones que manejan su propio aislamiento
:::

::: {.column width="50%"}
```mermaid
graph LR
    A[Contenedor] --> B[eth0 del Host]
    B --> C[üåê Internet]
    
    style A fill:#f3e5f5
```
:::
:::

**‚ö†Ô∏è Precauci√≥n:** Menos seguridad - el contenedor ve toda la red del host

---

## Comunicaci√≥n entre contenedores

::: {.columns}
::: {.column width="50%"}
**Problema tradicional:**
- ¬øC√≥mo encuentra un contenedor a otro?
- Las IPs cambian
- Configuraci√≥n manual complicada

**Soluci√≥n Docker:**
- DNS autom√°tico
- Nombres de contenedor como hostname
- Redes personalizadas
:::

::: {.column width="50%"}
```mermaid
graph LR
    A[webapp] --> B[Resuelve: database]
    B --> C[DNS Docker]
    C --> D[172.17.0.3]
    D --> E[contenedor-db]
    
    style C fill:#fff9c4
```
:::
:::

---

## Escenario pr√°ctico: Aplicaci√≥n web + Base de datos

```mermaid
graph TB
    A[Usuario] --> B[Puerto 80:8080]
    B --> C[Contenedor Web]
    C --> D[Red personalizada: app-network]
    D --> E[Contenedor Database]
    
    F[Volume DB] --> E
    G[Bind Mount<br/>c√≥digo fuente] --> C
    
    style D fill:#c8e6c9
    style F fill:#e1f5fe
    style G fill:#fff3e0
```

---

## Patrones comunes de comunicaci√≥n

::: {.columns}
::: {.column width="50%"}
**1. Web ‚Üí API ‚Üí Database**
```mermaid
graph LR
    A[Frontend] --> B[Backend API]
    B --> C[Database]
```
**2. Microservicios**
```mermaid
graph TB
    A[API Gateway] --> B[Servicio Users]
    A --> C[Servicio Orders]
    A --> D[Servicio Payments]
```
:::

::: {.column width="50%"}
**3. Publicaci√≥n de puertos**
- Exponer servicios espec√≠ficos
- Mapeo puerto contenedor ‚Üí puerto host

**4. Comunicaci√≥n entre hosts**
- Docker Swarm mode
- Overlay networks
:::
:::

---

## Buenas pr√°cticas de redes

**Seguridad:**
- Usa redes personalizadas para aislar grupos de contenedores
- No uses la red "host" a menos que sea necesario
- Limita la exposici√≥n de puertos

**Organizaci√≥n:**
- Una red por aplicaci√≥n/microservicio
- Nombres descriptivos para redes
- Documenta las dependencias entre servicios

---

## Resumen: Almacenamiento

| Concepto | Prop√≥sito | Cu√°ndo usar |
|----------|-----------|-------------|
| **Volumes** | Persistencia gestionada | Producci√≥n, datos cr√≠ticos |
| **Bind Mounts** | Desarrollo, configuraci√≥n | Desarrollo, configs espec√≠ficas |
| **tmpfs** | Datos temporales | Cach√©s, datos sensibles |

---

## Resumen: Redes

| Tipo de Red | Aislamiento | Caso de uso |
|-------------|-------------|-------------|
| **Bridge** | Aislamiento por defecto | La mayor√≠a de casos |
| **Host** | Sin aislamiento | Alto rendimiento |
| **None** | Completo | Contenedores sin red |
| **Overlay** | Multi-host | Docker Swarm, clusters |

---

## Patr√≥n final: Aplicaci√≥n completa

```mermaid
graph TB
    A[üåê Internet] --> B[Load Balancer]
    B --> C[Web Server 1]
    B --> D[Web Server 2]
    
    C --> E[App Network]
    D --> E
    E --> F[Database]
    E --> G[Cache]
    E --> H[Message Queue]
    
    I[Volume DB] --> F
    J[Volume Queue] --> H
    
    style E fill:#f3e5f5
```

---

## ¬°Preparados para el laboratorio!

**Lo que hemos cubierto:**
- Fundamentos de almacenamiento persistente
- Tipos de vol√∫menes y cu√°ndo usar cada uno
- Arquitectura de redes en Docker
- Comunicaci√≥n entre contenedores
- Patrones comunes y mejores pr√°cticas

**Pr√≥ximamente:** ¬°Manos a la obra con ejercicios pr√°cticos!
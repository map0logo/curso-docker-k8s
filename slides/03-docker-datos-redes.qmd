---
title: Almacenamiento y Redes en Docker
subtitle: Almacenamiento persistente y comunicación entre contenedores
date: last-modified
author:
  - name: Francisco Palm
    orcid: 0000-0002-1293-0868
    email: fpalm@qu4nt.com
    affiliations: qu4nt, activistasxsl
format:
  clean-revealjs
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
lang: es
logo: images/qu4nt-logo.png
---

# Almacenamiento y Redes en Docker
## Almacenamiento persistente y comunicación entre contenedores

---

## ¿Por qué nos importa el almacenamiento?

::: {.columns}
::: {.column width="50%"}
**Problema:** Los contenedores son efímeros

- Por diseño, los contenedores son temporales
- Cuando un contenedor se elimina, TODO su contenido desaparece
- ¡Incluyendo bases de datos, archivos de configuración, logs!

:::

::: {.column width="50%"}
```mermaid
graph TD
    A[Contenedor MySQL] --> B[Datos en capa escribible]
    B --> C[¡Contenedor eliminado!]
    C --> D[💥 Datos perdidos]
```
:::
:::

- Todo lo que guardas dentro del contenedor **desaparece** al detenerlo.
- ¡Imagina perder la base de datos cada vez que reinicias tu app!

> 🤯 **¡No! Necesitamos un lugar donde los datos vivan más allá del contenedor.**


**Solución:** Necesitamos almacenamiento PERSISTENTE


> 💡 **¡Tu aplicación no es solo código! Es código + datos + comunicación.**

---

## Solución: Almacenamiento persistente

### ¿Por qué los datos desaparecen?

Cuando un contenedor se elimina, **todo su sistema de archivos se destruye**.  
Esto incluye:

- Archivos creados durante la ejecución  
- Bases de datos  
- Logs  
- Configuraciones generadas

> 🧠 **Los contenedores son efímeros por diseño** → pero **tus datos no deberían serlo**.

> 💡 **Regla de oro**:  
> **Nunca almacenes datos importantes dentro del contenedor sin persistencia externa.**

---


## Docker ofrece **tres formas principales** de guardar datos fuera del contenedor:

1. **Bind mounts**  
   → Monta un directorio o archivo del **host** dentro del contenedor.

2. **Volumes**  
   → Almacenamiento gestionado por Docker (recomendado para producción).

3. **tmpfs mounts**  
   → Almacenamiento en memoria (no persistente, útil para datos temporales).

🧠 **Piensa en ello como elegir entre:**

- Guardar en tu casa (bind mount)
- Guardar en una caja fuerte del banco (volume)
- Guardar en una pizarra (tmpfs)

---

## El sistema de archivos de Docker

::: {.columns}
::: {.column width="60%"}
```mermaid
graph TB
    A[Imagen Base] --> B[Capa 1: SO]
    A --> C[Capa 2: Aplicación]
    A --> D[Capa 3: Configuración]
    
    B --> E[Contenedor]
    C --> E
    D --> E
    
    E --> F[Capa escribible<br/>Union File System]
    
    style F fill:#e1f5fe
```
:::

::: {.column width="40%"}
**Concepto clave:** Capas superpuestas
- **Capas de solo lectura:** Provenientes de la imagen
- **Capa escribible:** Única por contenedor
- **Union File System:** Combina todas las capas
:::
:::

---

## Tipos de almacenamiento en Docker

```mermaid
graph LR
    A[Almacenamiento Docker] --> B[Bind Mounts]
    A --> C[Volumes]
    A --> D[tmpfs mounts]
    
    B --> E[Host directamente]
    C --> F[Gestionado por Docker]
    D --> G[Memoria RAM]
    
    style C fill:#c8e6c9
```

---

## Volumes: La opción recomendada

::: {.columns}
::: {.column width="50%"}
**¿Qué son?**
Un **Volume** es un directorio **gestionado por Docker** fuera del ciclo de vida del contenedor.

- Almacenado en `/var/lib/docker/volumes/` (en Linux)
- Sobrevive a la eliminación del contenedor
- Funciona en todos los sistemas operativos (incluyendo Docker Desktop)
- Compatible con clusters (Swarm, Kubernetes)

**Ventajas:**
- Aislamiento del sistema de archivos del host  
- Fácil de respaldar (`docker run --rm -v mi-volumen:/datos alpine tar czf - -C /datos .`)  
- Seguro y portable
- Gestionados mediante CLI de Docker
- Mejor rendimiento en algunos sistemas
:::

::: {.column width="50%"}
```mermaid
graph TB
    A[Contenedor A] --> C[Volume MySQL]
    B[Contenedor B] --> C
    D[Contenedor C] --> C
    
    C --> E[Persiste entre contenedores]
    E --> F[Sobrevive a reinicios]
```

```mermaid
graph LR
  Container["Contenedor"] -->|escribe| Volume["Docker Volume"]
  Volume -->|persiste| Disco["Disco del Host"]
  style Volume fill:#4CAF50,stroke:#388E3C,color:white

:::
:::

---

## Gestión de Volumes

### Comandos esenciales

```bash
# Crear un volume
docker volume create mi-db-data

# Listar volumes
docker volume ls

# Inspeccionar un volume
docker volume inspect mi-db-data

# Eliminar un volume (¡solo si no está en uso!)
docker volume rm mi-db-data
```

> 🔍 **Docker asigna un nombre único si no lo especificas**,  
> pero **¡siempre nombra tus volumes!** → facilita la gestión y el debugging.

---

## Bind Mounts: Conexión directa

::: {.columns}
::: {.column width="50%"}
**¿Qué son?**
- Montaje de un directorio específico del host
- El contenedor accede directamente al filesystem del host
- Mapea un **directorio o archivo específico del host** directamente al contenedor.

**Casos de uso:**
- Desarrollo (código fuente)
- Configuraciones específicas del host
- Cuando necesitas control total
:::

::: {.column width="50%"}
```mermaid
graph LR
    A[/home/usuario/proyecto] --> B[Contenedor App]
    C[/etc/config] --> B
    
    style A fill:#fff3e0
    style C fill:#fff3e0
```

```mermaid
graph LR
  HostDir["/home/usuario/proyecto"] -->|montado en| Container["/app"]
  Container --> App["App ve los archivos en tiempo real"]
```

:::
:::

**📌 Ideal para desarrollo**, cuando quieres editar archivos en tiempo real.

**⚠️ Precaución:**

- Rutas dependen del sistema operativo del host  
- Menos portabilidad  
- Riesgo de sobrescribir archivos del host

---

## tmpfs: Almacenamiento en memoria

::: {.columns}
::: {.column width="60%"}
**¿Qué son?**
- Sistema de archivos temporal en memoria RAM
- Extremadamente rápido
- Se pierde al reiniciar el contenedor

**Casos de uso:**
- Archivos temporales sensibles
- Cachés que no necesitan persistir
- Información sensible que no debe escribirse en disco
:::

::: {.column width="40%"}
```mermaid
graph TB
    A[Memoria RAM] --> B[tmpfs mount]
    B --> C[Contenedor]
    
    style A fill:#fce4ec
```
:::
:::

---

## Comparación: ¿Cuándo usar cada uno?

| Tipo | Persistencia | Rendimiento | Caso principal |
|------|--------------|-------------|----------------|
| **Volumes** | ✅ Sí | Alto | Producción, bases de datos |
| **Bind Mounts** | ✅ Sí | Medio | Desarrollo, configuraciones |
| **tmpfs** | ❌ No | Muy alto | Datos temporales sensibles |

> 🧩 **Regla mental**:  
> - **Producción → Volume**  
> - **Desarrollo → Bind Mount**

---

## ¿Por qué necesitamos redes en Docker?

::: {.columns}
::: {.column width="50%"}
**Problema inicial:**
- Los contenedores están aislados
- No pueden comunicarse entre sí por defecto
- No son accesibles desde el exterior

**Necesitamos:**
- Comunicación entre contenedores
- Exponer servicios al mundo exterior
- Aislamiento de redes diferentes
:::

::: {.column width="50%"}
```mermaid
graph LR
    A[🌐 Internet] --> B[¿Cómo llego?]
    C[Contenedor Web] --> D[Contenedor DB]
    D --> C
    
    style B fill:#ffcdd2
```
:::
:::

---

## Arquitectura de red por defecto

```mermaid
graph TB
    A[Host Machine] --> B[Docker Engine]
    B --> C[Docker Daemon]
    
    C --> D[docker0 Bridge]
    D --> E[Contenedor A<br/>172.17.0.2]
    D --> F[Contenedor B<br/>172.17.0.3]
    D --> G[Contenedor C<br/>172.17.0.4]
    
    A --> H[eth0: 192.168.1.100]
    
    style D fill:#e8f5e8
```

**Bridge por defecto:** Todos los contenedores conectados automáticamente



---

## Tipos de redes en Docker

```mermaid
graph TB
    A[Tipos de Red] --> B[Bridge]
    A --> C[Host]
    A --> D[None]
    A --> E[Overlay]
    
    B --> F[Aislamiento por defecto]
    C --> G[Comparte red del host]
    D --> H[Sin red]
    E --> I[Multi-host]
    
    style B fill:#bbdefb
```

---

## Bridge Network: El más común

::: {.columns}
::: {.column width="50%"}
**Características:**
- Red privada interna a Docker
- NAT para comunicación externa
- DNS automático entre contenedores
- Aislamiento por defecto

**Como un router virtual:**
- Cada contenedor tiene IP única
- Pueden comunicarse entre sí
- Salida al exterior mediante NAT

Cuando corres un contenedor sin red personalizada:

```bash
docker run -d nginx
```

- Se conecta a la red `bridge` predeterminada.
- Tiene una IP interna (ej: `172.17.0.2`).
- **No puede acceder a otros contenedores por nombre** → solo por IP (¡y las IPs cambian!).

> ❌ **No recomendado para apps multi-contenedor**.

:::

::: {.column width="50%"}
```mermaid
graph TB
    A[Bridge Network] --> B[Contenedor Web:80]
    A --> C[Contenedor DB:3306]
    A --> D[Contenedor Cache:6379]
    
    B --> E[📡 Puerto 8080 expuesto]
    E --> F[🌐 Internet]
    
    style A fill:#e3f2fd
```
:::
:::

---

## Host Network: Máximo rendimiento

::: {.columns}
::: {.column width="50%"}
**Características:**
- El contenedor usa la red del host directamente
- Sin aislamiento de red
- Máximo rendimiento (sin NAT)

**Casos de uso:**
- Alto rendimiento necesario
- Cuando necesitas usar puertos del host directamente
- Aplicaciones que manejan su propio aislamiento
:::

::: {.column width="50%"}
```mermaid
graph LR
    A[Contenedor] --> B[eth0 del Host]
    B --> C[🌐 Internet]
    
    style A fill:#f3e5f5
```
:::
:::

**⚠️ Precaución:** Menos seguridad - el contenedor ve toda la red del host

---

## Comunicación entre contenedores

::: {.columns}
::: {.column width="50%"}
**Problema tradicional:**
- ¿Cómo encuentra un contenedor a otro?
- Las IPs cambian
- Configuración manual complicada

**Solución Docker:**
- DNS automático
- Nombres de contenedor como hostname
- Redes personalizadas
:::

::: {.column width="50%"}
```mermaid
graph LR
    A[webapp] --> B[Resuelve: database]
    B --> C[DNS Docker]
    C --> D[172.17.0.3]
    D --> E[contenedor-db]
    
    style C fill:#fff9c4
```
:::
:::

---

## Escenario práctico: Aplicación web + Base de datos

```mermaid
graph TB
    A[Usuario] --> B[Puerto 80:8080]
    B --> C[Contenedor Web]
    C --> D[Red personalizada: app-network]
    D --> E[Contenedor Database]
    
    F[Volume DB] --> E
    G[Bind Mount<br/>código fuente] --> C
    
    style D fill:#c8e6c9
    style F fill:#e1f5fe
    style G fill:#fff3e0
```

---

## Patrones comunes de comunicación

::: {.columns}
::: {.column width="50%"}
**1. Web → API → Database**
```mermaid
graph LR
    A[Frontend] --> B[Backend API]
    B --> C[Database]
```
**2. Microservicios**
```mermaid
graph TB
    A[API Gateway] --> B[Servicio Users]
    A --> C[Servicio Orders]
    A --> D[Servicio Payments]
```
:::

::: {.column width="50%"}
**3. Publicación de puertos**
- Exponer servicios específicos
- Mapeo puerto contenedor → puerto host

**4. Comunicación entre hosts**
- Docker Swarm mode
- Overlay networks
:::
:::

---

## Buenas prácticas de redes

**Seguridad:**
- Usa redes personalizadas para aislar grupos de contenedores
- No uses la red "host" a menos que sea necesario
- Limita la exposición de puertos

**Organización:**
- Una red por aplicación/microservicio
- Nombres descriptivos para redes
- Documenta las dependencias entre servicios

---

## Resumen: Almacenamiento

| Concepto | Propósito | Cuándo usar |
|----------|-----------|-------------|
| **Volumes** | Persistencia gestionada | Producción, datos críticos |
| **Bind Mounts** | Desarrollo, configuración | Desarrollo, configs específicas |
| **tmpfs** | Datos temporales | Cachés, datos sensibles |

---

## Resumen: Redes

| Tipo de Red | Aislamiento | Caso de uso |
|-------------|-------------|-------------|
| **Bridge** | Aislamiento por defecto | La mayoría de casos |
| **Host** | Sin aislamiento | Alto rendimiento |
| **None** | Completo | Contenedores sin red |
| **Overlay** | Multi-host | Docker Swarm, clusters |

---

## Patrón final: Aplicación completa

```mermaid
graph TB
    A[🌐 Internet] --> B[Load Balancer]
    B --> C[Web Server 1]
    B --> D[Web Server 2]
    
    C --> E[App Network]
    D --> E
    E --> F[Database]
    E --> G[Cache]
    E --> H[Message Queue]
    
    I[Volume DB] --> F
    J[Volume Queue] --> H
    
    style E fill:#f3e5f5
```

---

## Creando una red personalizada

```bash
docker network create mi-red
```

Luego, al crear contenedores:

```bash
docker run -d --network=mi-red --name=db mysql
docker run -d --network=mi-red --name=web nginx
```

Ahora, desde `web`, puedes hacer:

```bash
ping db  # ¡Funciona!
```

> ✨ **Docker resuelve `db` → IP automáticamente. ¡Magia de DNS!**

---

## Compartiendo datos entre contenedores

¿Y si dos contenedores necesitan los **mismos archivos**?

### Opción 1: Usar un **volume compartido**

```mermaid
graph LR
  Volume[(datos-compartidos)] --> Contenedor1
  Volume --> Contenedor2
```

Ambos montan el mismo volumen → ven los mismos archivos.

### Opción 2: Usar un **contenedor de datos** (menos común hoy)

> 💡 **El volumen compartido es la forma moderna y limpia.**

---

## Buenas prácticas que debes recordar

✅ **Usa volumes para datos persistentes en producción**  
✅ **Crea redes personalizadas para grupos de contenedores**  
✅ **Nunca almacenes datos críticos en el filesystem del contenedor**  
✅ **Nombra tus contenedores y redes para hacer todo más legible**

> 🧩 **Docker no es solo "correr una imagen". Es orquestar un ecosistema.**

---

## Formatos de publicación de puertos

| Sintaxis               | Significado                          |
|------------------------|--------------------------------------|
| `-p 8080:80`           | Host:8080 → Contenedor:80            |
| `-p 80`                | Puerto aleatorio en host → 80        |
| `-p 127.0.0.1:8080:80` | Solo accesible desde localhost       |

> 🔒 **Buena práctica**:  
> Usa `-p 127.0.0.1:PUERTO:PUERTO` en desarrollo → evita exposición accidental en redes públicas.

---

## ¿Qué NO hacer con puertos?

| ❌ Mal                          | ✅ Bien                          |
|----------------------------------|----------------------------------|
| Publicar todos los puertos       | Solo los necesarios              |
| Usar `-p 0.0.0.0:8080:80` en servidores públicos sin firewall | Restringir a localhost o usar proxy inverso |
| Asumir que el puerto del contenedor es accesible sin `-p` | Siempre publicar explícitamente |

> ⚠️ **Publicar un puerto ≠ exponerlo a internet**…  
> pero **sí lo expone en la máquina host** → ¡cuidado con firewalls y redes!

---

## Resumen visual

```mermaid
graph LR
  Host -->|Bind Mount| Container1
  DockerEngine -->|Volume| Container2
  DockerEngine -->|Volume| Container3
  Network[(mi-red)] --> Container2
  Network --> Container3
  Container2 <-->|Se comunican por nombre| Container3
```

### 1. **Persistencia**
- Usa **Volumes** para datos en producción  
- Usa **Bind Mounts** solo para desarrollo

### 2. **Redes**
- **Nunca** uses la red `bridge` por defecto para apps multi-contenedor  
- **Siempre** crea una red personalizada → comunicación por nombre

### 3. **Puertos**
- **Publica solo lo necesario**  
- **Restringe a localhost** en entornos de desarrollo

> 🌟 **Con esto, ya puedes construir apps reales en Docker**.

---

## ¿Qué sigue?

Ahora que entiendes los **conceptos**,  
¡estarás listo para el laboratorio práctico!

> 🚀 **Recuerda**:  
> - Los datos viven en **volumes**  
> - Los contenedores se hablan en **redes**  
> - Tú eres el arquitecto de este mundo efímero... ¡pero con memoria!


## ¡Preparados para el laboratorio!

**Lo que hemos cubierto:**
- Fundamentos de almacenamiento persistente
- Tipos de volúmenes y cuándo usar cada uno
- Arquitectura de redes en Docker
- Comunicación entre contenedores
- Patrones comunes y mejores prácticas

**Próximamente:** ¡Manos a la obra con ejercicios prácticos!